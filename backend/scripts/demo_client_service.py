#!/usr/bin/env python3
"""
üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ClientService

–°–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–∏—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
–ü—Ä–∏–Ω—Ü–∏–ø CyberKitty: –ø—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ.
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from models.client import ClientCreateData, ClientUpdateData, ClientStatus
from services.client_service import ClientService
from repositories.google_sheets_client_repository import GoogleSheetsClientRepository
from utils.exceptions import BusinessLogicError, ValidationError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


class MockClientRepository:
    """
    –ú–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Google Sheets.
    
    –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è GoogleSheetsClientRepository.
    """
    
    def __init__(self):
        self.clients = {}
        logger.info("MockClientRepository –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def save(self, client):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞."""
        self.clients[client.id] = client
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –º–æ–∫–µ")
        return client
    
    async def get_by_id(self, client_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID."""
        return self.clients.get(client_id)
    
    async def get_by_phone(self, phone):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É."""
        for client in self.clients.values():
            if client.phone == phone:
                return client
        return None
    
    async def get_by_telegram_id(self, telegram_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ Telegram ID."""
        for client in self.clients.values():
            if client.telegram_id == telegram_id:
                return client
        return None
    
    async def get_all(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."""
        return list(self.clients.values())
    
    async def search(self, query):
        """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
        results = []
        query_lower = query.lower()
        for client in self.clients.values():
            if (query_lower in client.name.lower() or 
                query in client.phone):
                results.append(client)
        return results


async def demonstrate_client_service():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã ClientService."""
    
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ClientService CyberKitty Practiti")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    repository = MockClientRepository()
    client_service = ClientService(repository)
    
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print("-" * 30)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    clients_data = [
        ClientCreateData(
            name="–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
            phone="+79161234567",
            telegram_id=123456789,
            yoga_experience=True,
            intensity_preference="—Å—Ä–µ–¥–Ω—è—è",
            time_preference="–≤–µ—á–µ—Ä",
            age=30,
            injuries="–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ø–∏–Ω–æ–π",
            goals="–£–ª—É—á—à–µ–Ω–∏–µ –≥–∏–±–∫–æ—Å—Ç–∏"
        ),
        ClientCreateData(
            name="–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞",
            phone="+79169876543",
            telegram_id=987654321,
            yoga_experience=False,
            intensity_preference="–Ω–∏–∑–∫–∞—è",
            time_preference="—É—Ç—Ä–æ",
            age=25,
            goals="–°–Ω—è—Ç–∏–µ —Å—Ç—Ä–µ—Å—Å–∞"
        ),
        ClientCreateData(
            name="–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞",
            phone="+79165555555",
            telegram_id=555555555,
            yoga_experience=True,
            intensity_preference="–≤—ã—Å–æ–∫–∞—è",
            time_preference="–¥–µ–Ω—å",
            age=35
        )
    ]
    
    created_clients = []
    for client_data in clients_data:
        try:
            client = await client_service.create_client(client_data)
            created_clients.append(client)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç: {client.name} ({client.phone})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    
    print(f"\nüìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(created_clients)}")
    
    print("\n2Ô∏è‚É£ –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print("-" * 30)
    
    # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
    search_results = await client_service.search_clients("–ê–Ω–Ω–∞")
    print(f"üîç –ü–æ–∏—Å–∫ '–ê–Ω–Ω–∞': –Ω–∞–π–¥–µ–Ω–æ {len(search_results)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    for client in search_results:
        print(f"   - {client.name} ({client.phone})")
    
    # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    client_by_phone = await client_service.get_client_by_phone("+79161234567")
    if client_by_phone:
        print(f"üìû –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {client_by_phone.name}")
    
    # –ü–æ–∏—Å–∫ –ø–æ Telegram ID
    client_by_telegram = await client_service.get_client_by_telegram_id(123456789)
    if client_by_telegram:
        print(f"üì± –ü–æ–∏—Å–∫ –ø–æ Telegram: {client_by_telegram.name}")
    
    print("\n3Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞")
    print("-" * 30)
    
    if created_clients:
        client_to_update = created_clients[0]
        update_data = ClientUpdateData(
            name="–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞-–ù–æ–≤–∏–∫–æ–≤–∞",
            injuries="–í—ã–ª–µ—á–∏–ª–∞ —Å–ø–∏–Ω—É!"
        )
        
        try:
            updated_client = await client_service.update_client(
                client_to_update.id, 
                update_data
            )
            print(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç: {updated_client.name}")
            print(f"   –ù–æ–≤—ã–µ —Ç—Ä–∞–≤–º—ã: {updated_client.injuries}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    print("\n4Ô∏è‚É£ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏")
    print("-" * 30)
    
    if len(created_clients) >= 2:
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client_to_deactivate = created_clients[1]
        deactivated = await client_service.deactivate_client(client_to_deactivate.id)
        print(f"‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {deactivated.name} (—Å—Ç–∞—Ç—É—Å: {deactivated.status})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        active_clients = await client_service.get_active_clients()
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(active_clients)}")
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        reactivated = await client_service.activate_client(client_to_deactivate.id)
        print(f"‚ñ∂Ô∏è –†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {reactivated.name} (—Å—Ç–∞—Ç—É—Å: {reactivated.status})")
    
    print("\n5Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("-" * 30)
    
    all_clients = await client_service.get_all_clients()
    active_clients = await client_service.get_active_clients()
    trial_clients = await client_service.get_clients_by_status(ClientStatus.TRIAL)
    
    print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(all_clients)}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_clients)}")
    print(f"   –ù–∞ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ: {len(trial_clients)}")
    
    print("\n6Ô∏è‚É£ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    print("-" * 30)
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    try:
        duplicate_data = ClientCreateData(
            name="–î—É–±–ª–∏–∫–∞—Ç",
            phone="+79161234567",  # –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            telegram_id=999999999,
            yoga_experience=False,
            intensity_preference="–ª—é–±–∞—è",
            time_preference="–ª—é–±–æ–µ"
        )
        await client_service.create_client(duplicate_data)
    except BusinessLogicError as e:
        print(f"üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await client_service.get_client("nonexistent-id")
    except BusinessLogicError as e:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è: {e}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    try:
        await client_service.search_clients("–ê")
    except ValidationError as e:
        print(f"üìè –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞: {e}")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nClientService —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! üéâ")


async def demonstrate_error_handling():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    
    print("\nüõ°Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    print("=" * 40)
    
    repository = MockClientRepository()
    client_service = ClientService(repository)
    
    error_cases = [
        ("–ü—É—Å—Ç–æ–π ID –∫–ª–∏–µ–Ω—Ç–∞", lambda: client_service.get_client("")),
        ("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω", lambda: client_service.get_client_by_phone("invalid")),
        ("–ù—É–ª–µ–≤–æ–π Telegram ID", lambda: client_service.get_client_by_telegram_id(0)),
        ("–ö–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", lambda: client_service.search_clients("A")),
    ]
    
    for description, test_func in error_cases:
        try:
            await test_func()
            print(f"‚ùå {description}: –æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –µ—ë –Ω–µ –±—ã–ª–æ")
        except (ValidationError, BusinessLogicError) as e:
            print(f"‚úÖ {description}: {type(e).__name__}")
        except Exception as e:
            print(f"‚ö†Ô∏è {description}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ {type(e).__name__}")


if __name__ == "__main__":
    print("ü§ñ CyberKitty Practiti - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ClientService")
    print("–ê–Ω–¥—Ä–µ–π, –ø—Ä–∏–Ω—Ü–∏–ø: –ø—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ! üöÄ\n")
    
    try:
        asyncio.run(demonstrate_client_service())
        asyncio.run(demonstrate_error_handling())
    except KeyboardInterrupt:
        print("\n\nüëã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    print("\nüéØ –°–µ—Å—Å–∏—è B3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ClientService –≥–æ—Ç–æ–≤ –¥–ª—è Telegram Bot! üî•") 