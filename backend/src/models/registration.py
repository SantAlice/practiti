"""
üìù –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CyberKitty Practiti

–ú–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

from enum import Enum
from typing import Optional
from pydantic import BaseModel, Field, field_validator


class RegistrationState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    START = "start"
    WAITING_NAME = "waiting_name"
    WAITING_PHONE = "waiting_phone"
    WAITING_AGE = "waiting_age"
    WAITING_YOGA_EXPERIENCE = "waiting_yoga_experience"
    WAITING_INTENSITY = "waiting_intensity"
    WAITING_TIME_PREFERENCE = "waiting_time_preference"
    WAITING_INJURIES = "waiting_injuries"
    WAITING_GOALS = "waiting_goals"
    WAITING_HOW_FOUND = "waiting_how_found"
    CONFIRMATION = "confirmation"
    COMPLETED = "completed"


class RegistrationData(BaseModel):
    """
    –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –°–æ–±–∏—Ä–∞—é—Ç—Å—è –ø–æ—à–∞–≥–æ–≤–æ —á–µ—Ä–µ–∑ Telegram Bot.
    """
    telegram_id: int
    telegram_username: Optional[str] = None
    name: Optional[str] = None
    phone: Optional[str] = None
    age: Optional[int] = None
    yoga_experience: Optional[bool] = None
    intensity_preference: Optional[str] = None
    time_preference: Optional[str] = None
    injuries: Optional[str] = None
    goals: Optional[str] = None
    how_found_us: Optional[str] = None
    current_state: RegistrationState = RegistrationState.START
    
    @field_validator('phone')
    @classmethod
    def validate_phone_format(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
        if v is None:
            return v
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
        cleaned = ''.join(c for c in v if c.isdigit() or c == '+')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        if not cleaned.startswith('+'):
            if cleaned.startswith('8'):
                cleaned = '+7' + cleaned[1:]
            elif cleaned.startswith('7'):
                cleaned = '+' + cleaned
            else:
                cleaned = '+7' + cleaned
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        if len(cleaned) != 12:  # +7XXXXXXXXXX
            raise ValueError("–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä")
        
        return cleaned
    
    @field_validator('age')
    @classmethod
    def validate_age_range(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞."""
        if v is not None and (v < 16 or v > 80):
            raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 16 –¥–æ 80 –ª–µ—Ç")
        return v
    
    def is_complete(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è."""
        required_fields = [
            'name', 'phone', 'yoga_experience', 
            'intensity_preference', 'time_preference'
        ]
        return all(getattr(self, field) is not None for field in required_fields)
    
    def get_summary(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
        experience = "–î–∞" if self.yoga_experience else "–ù–µ—Ç"
        age_str = f"{self.age} –ª–µ—Ç" if self.age else "–ù–µ —É–∫–∞–∑–∞–Ω"
        injuries_str = self.injuries if self.injuries else "–ù–µ—Ç"
        goals_str = self.goals if self.goals else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        how_found_str = self.how_found_us if self.how_found_us else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        return f"""
üìã **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**

üë§ **–ò–º—è:** {self.name}
üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {self.phone}
üéÇ **–í–æ–∑—Ä–∞—Å—Ç:** {age_str}
üßò **–û–ø—ã—Ç –π–æ–≥–∏:** {experience}
üí™ **–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:** {self.intensity_preference}
‚è∞ **–í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π:** {self.time_preference}
ü©π **–¢—Ä–∞–≤–º—ã/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:** {injuries_str}
üéØ **–¶–µ–ª–∏:** {goals_str}
üì¢ **–ö–∞–∫ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å:** {how_found_str}
        """.strip()


class RegistrationStep(BaseModel):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–≥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    state: RegistrationState
    question: str
    help_text: Optional[str] = None
    validation_error: Optional[str] = None
    options: Optional[list] = None  # –î–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞
    
    
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
REGISTRATION_STEPS = {
    RegistrationState.WAITING_NAME: RegistrationStep(
        state=RegistrationState.WAITING_NAME,
        question="üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        help_text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞)"
    ),
    
    RegistrationState.WAITING_PHONE: RegistrationStep(
        state=RegistrationState.WAITING_PHONE,
        question="üì± –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        help_text="–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX"
    ),
    
    RegistrationState.WAITING_AGE: RegistrationStep(
        state=RegistrationState.WAITING_AGE,
        question="üéÇ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
        help_text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 16 –¥–æ 80. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ /skip"
    ),
    
    RegistrationState.WAITING_YOGA_EXPERIENCE: RegistrationStep(
        state=RegistrationState.WAITING_YOGA_EXPERIENCE,
        question="üßò –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –∑–∞–Ω—è—Ç–∏–π –π–æ–≥–æ–π?",
        help_text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        options=["–î–∞, –µ—Å—Ç—å –æ–ø—ã—Ç", "–ù–µ—Ç, —è –Ω–æ–≤–∏—á–æ–∫"]
    ),
    
    RegistrationState.WAITING_INTENSITY: RegistrationStep(
        state=RegistrationState.WAITING_INTENSITY,
        question="üí™ –ö–∞–∫—É—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
        help_text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å:",
        options=["–ù–∏–∑–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–í—ã—Å–æ–∫–∞—è", "–õ—é–±–∞—è"]
    ),
    
    RegistrationState.WAITING_TIME_PREFERENCE: RegistrationStep(
        state=RegistrationState.WAITING_TIME_PREFERENCE,
        question="‚è∞ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º —É–¥–æ–±–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?",
        help_text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:",
        options=["–£—Ç—Ä–æ", "–î–µ–Ω—å", "–í–µ—á–µ—Ä", "–õ—é–±–æ–µ"]
    ),
    
    RegistrationState.WAITING_INJURIES: RegistrationStep(
        state=RegistrationState.WAITING_INJURIES,
        question="ü©π –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ç—Ä–∞–≤–º—ã –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?",
        help_text="–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –µ—Å–ª–∏ –Ω–µ—Ç"
    ),
    
    RegistrationState.WAITING_GOALS: RegistrationStep(
        state=RegistrationState.WAITING_GOALS,
        question="üéØ –ö–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–ª–∏ –æ—Ç –∑–∞–Ω—è—Ç–∏–π –π–æ–≥–æ–π?",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–Ω—è—Ç—å —Å—Ç—Ä–µ—Å—Å, —É–ª—É—á—à–∏—Ç—å –≥–∏–±–∫–æ—Å—Ç—å, –ø–æ—Ö—É–¥–µ—Ç—å. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å /skip"
    ),
    
    RegistrationState.WAITING_HOW_FOUND: RegistrationStep(
        state=RegistrationState.WAITING_HOW_FOUND,
        question="üì¢ –ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏?",
        help_text="–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–∏–≤ /skip",
        options=["–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥—Ä—É–∑–µ–π", "–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "–†–µ–∫–ª–∞–º–∞", "–î—Ä—É–≥–æ–µ"]
    )
} 