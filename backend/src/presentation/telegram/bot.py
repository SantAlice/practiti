"""
ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram Bot

–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram Bot.
–ü—Ä–∏–Ω—Ü–∏–ø CyberKitty: –ø—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ.
"""

import asyncio
import logging
from typing import Optional

from telegram import BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from telegram.ext import ContextTypes
from telegram import Update

from ...config.settings import TelegramConfig
from ...services.protocols.client_service import ClientServiceProtocol
from .handlers.command_handlers import CommandHandlers

logger = logging.getLogger(__name__)


class PrakritiTelegramBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram Bot –¥–ª—è CyberKitty Practiti.
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç:
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–æ—Ç–∞
    - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    - –ó–∞–ø—É—Å–∫–æ–º –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    - –û–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    
    def __init__(
        self, 
        config: TelegramConfig,
        client_service: ClientServiceProtocol
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram Bot
            client_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        """
        self.config = config
        self.client_service = client_service
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
        self.application: Optional[Application] = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.command_handlers = CommandHandlers(client_service)
        
        logger.info("PrakritiTelegramBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞.
        """
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = (
            Application.builder()
            .token(self.config.bot_token)
            .build()
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        await self._register_handlers()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await self._setup_bot_commands()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self._error_handler)
        
        logger.info("Telegram Bot —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _register_handlers(self) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥.
        """
        logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(
            CommandHandler("start", self.command_handlers.start_command)
        )
        self.application.add_handler(
            CommandHandler("help", self.command_handlers.help_command)
        )
        self.application.add_handler(
            CommandHandler("info", self.command_handlers.info_command)
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
        self.application.add_handler(
            MessageHandler(
                filters.COMMAND, 
                self.command_handlers.unknown_command
            )
        )
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def _setup_bot_commands(self) -> None:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
        """
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥...")
        
        commands = [
            BotCommand("start", "üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("help", "üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
            BotCommand("info", "üßò‚Äç‚ôÄÔ∏è –û —Å—Ç—É–¥–∏–∏"),
            BotCommand("register", "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
            BotCommand("contact", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"),
        ]
        
        if self.application and self.application.bot:
            await self.application.bot.set_my_commands(commands)
            logger.info("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    async def _error_handler(self, update: Optional[Update], context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫.
        
        Args:
            update: Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        error = context.error
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        if update:
            user_info = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if update.effective_user:
                user_info = f"@{update.effective_user.username} (ID: {update.effective_user.id})"
            
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç {user_info}: {error}",
                exc_info=True
            )
        else:
            logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {error}", exc_info=True)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if update and update.effective_chat:
            try:
                await update.effective_chat.send_message(
                    "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. "
                    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except Exception as send_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
        if self.config.admin_chat_id:
            try:
                admin_message = (
                    f"üö® **–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:**\n\n"
                    f"**–û—à–∏–±–∫–∞:** `{str(error)[:200]}`\n"
                    f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_info if update else '—Å–∏—Å—Ç–µ–º–Ω–∞—è'}\n"
                    f"**–í—Ä–µ–º—è:** {context.user_data.get('timestamp', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                )
                
                if self.application and self.application.bot:
                    await self.application.bot.send_message(
                        chat_id=self.config.admin_chat_id,
                        text=admin_message,
                        parse_mode='Markdown'
                    )
            except Exception as admin_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_error}")
    
    async def start_polling(self) -> None:
        """
        –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling.
        """
        if not self.application:
            await self.initialize()
        
        logger.info("–ó–∞–ø—É—Å–∫ Telegram Bot –≤ —Ä–µ–∂–∏–º–µ polling...")
        
        try:
            if self.application:
                await self.application.initialize()
                await self.application.start()
                await self.application.updater.start_polling(drop_pending_updates=True)
                
                # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
                import asyncio
                try:
                    while True:
                        await asyncio.sleep(1)
                except KeyboardInterrupt:
                    pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")
            raise
    
    async def start_webhook(self, webhook_url: str, port: int = 8080) -> None:
        """
        –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook.
        
        Args:
            webhook_url: URL –¥–ª—è webhook
            port: –ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        """
        if not self.application:
            await self.initialize()
        
        logger.info(f"–ó–∞–ø—É—Å–∫ Telegram Bot –≤ —Ä–µ–∂–∏–º–µ webhook: {webhook_url}")
        
        try:
            if self.application:
                await self.application.run_webhook(
                    listen="0.0.0.0",
                    port=port,
                    webhook_url=webhook_url,
                    drop_pending_updates=True
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ webhook: {e}")
            raise
    
    async def stop(self) -> None:
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.
        """
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram Bot...")
        
        if self.application:
            try:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        
        logger.info("Telegram Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def send_message_to_admin(self, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.config.admin_chat_id:
            logger.warning("Admin chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        try:
            if self.application and self.application.bot:
                await self.application.bot.send_message(
                    chat_id=self.config.admin_chat_id,
                    text=message
                )
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        
        return False
    
    def is_running(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç.
        
        Returns:
            True –µ—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω
        """
        return (
            self.application is not None and 
            self.application.running
        ) 