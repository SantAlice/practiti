"""
üóÑÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–æ—Ç–∞ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets.
"""

from typing import List, Optional, Dict
import uuid
from datetime import datetime

from ..models.client import Client, ClientCreateData, ClientUpdateData, ClientStatus
from ..repositories.protocols.client_repository import ClientRepositoryProtocol
from ..utils.logger import get_logger

logger = get_logger(__name__)


class InMemoryClientRepository(ClientRepositoryProtocol):
    """
    –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
        self._clients: Dict[str, Client] = {}
        self._phone_index: Dict[str, str] = {}  # phone -> client_id
        self._telegram_index: Dict[int, str] = {}  # telegram_id -> client_id
        
        logger.info("InMemoryClientRepository –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def save_client(self, data: ClientCreateData) -> Client:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        """
        client_id = str(uuid.uuid4())
        
        client = Client(
            id=client_id,
            name=data.name,
            phone=data.phone,
            telegram_id=data.telegram_id,
            yoga_experience=data.yoga_experience,
            intensity_preference=data.intensity_preference,
            time_preference=data.time_preference,
            age=data.age,
            injuries=data.injuries,
            goals=data.goals,
            how_found_us=data.how_found_us,
            status=ClientStatus.ACTIVE,
            created_at=datetime.now(),
            updated_at=datetime.now()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        self._clients[client_id] = client
        self._phone_index[data.phone] = client_id
        self._telegram_index[data.telegram_id] = client_id
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç–∏ —Å ID: {client_id}")
        return client
    
    async def get_client_by_id(self, client_id: str) -> Optional[Client]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            
        Returns:
            –ö–ª–∏–µ–Ω—Ç –∏–ª–∏ None
        """
        return self._clients.get(client_id)
    
    async def get_client_by_phone(self, phone: str) -> Optional[Client]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.
        
        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            
        Returns:
            –ö–ª–∏–µ–Ω—Ç –∏–ª–∏ None
        """
        client_id = self._phone_index.get(phone)
        if client_id:
            return self._clients.get(client_id)
        return None
    
    async def get_client_by_telegram_id(self, telegram_id: int) -> Optional[Client]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ Telegram ID.
        
        Args:
            telegram_id: Telegram ID
            
        Returns:
            –ö–ª–∏–µ–Ω—Ç –∏–ª–∏ None
        """
        client_id = self._telegram_index.get(telegram_id)
        if client_id:
            return self._clients.get(client_id)
        return None
    
    async def update_client(self, client_id: str, data: ClientUpdateData) -> Optional[Client]:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ None
        """
        client = self._clients.get(client_id)
        if not client:
            return None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        if data.name is not None:
            client.name = data.name
        if data.phone is not None:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
            old_phone = client.phone
            del self._phone_index[old_phone]
            client.phone = data.phone
            self._phone_index[data.phone] = client_id
        if data.status is not None:
            client.status = data.status
        if data.intensity_preference is not None:
            client.intensity_preference = data.intensity_preference
        if data.time_preference is not None:
            client.time_preference = data.time_preference
        if data.age is not None:
            client.age = data.age
        if data.injuries is not None:
            client.injuries = data.injuries
        if data.goals is not None:
            client.goals = data.goals
        
        client.updated_at = datetime.now()
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client.name} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ø–∞–º—è—Ç–∏")
        return client
    
    async def search_clients(self, query: str) -> List[Client]:
        """
        –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É.
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        """
        query_lower = query.lower()
        results = []
        
        for client in self._clients.values():
            if (query_lower in client.name.lower() or 
                query_lower in client.phone):
                results.append(client)
        
        return results
    
    async def delete_client(self, client_id: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        client = self._clients.get(client_id)
        if not client:
            return False
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
        del self._clients[client_id]
        del self._phone_index[client.phone]
        del self._telegram_index[client.telegram_id]
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client.name} —É–¥–∞–ª–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏")
        return True
    
    async def list_clients(
        self, 
        limit: Optional[int] = None, 
        offset: Optional[int] = None
    ) -> List[Client]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
        """
        clients = list(self._clients.values())
        
        if offset:
            clients = clients[offset:]
        if limit:
            clients = clients[:limit]
            
        return clients
    
    async def count_clients(self) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤.
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
        """
        return len(self._clients)
    
    def clear_all(self) -> int:
        """
        –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è).
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        count = len(self._clients)
        self._clients.clear()
        self._phone_index.clear()
        self._telegram_index.clear()
        
        logger.info(f"–û—á–∏—â–µ–Ω–æ {count} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ø–∞–º—è—Ç–∏")
        return count 