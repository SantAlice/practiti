"""
üõ°Ô∏è –ë–∞–∑–æ–≤—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è CyberKitty Practiti Backend

–ò–µ—Ä–∞—Ä—Ö–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ:
- PrakritiException (–±–∞–∑–æ–≤–æ–µ)
  - ValidationError (–æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
  - IntegrationError (–æ—à–∏–±–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π)
  - BusinessLogicError (–æ—à–∏–±–∫–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏)
"""

from typing import Optional, Dict, Any


class PrakritiException(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ CyberKitty Practiti."""
    
    def __init__(
        self, 
        message: str, 
        details: Optional[Dict[str, Any]] = None,
        error_code: Optional[str] = None
    ):
        self.message = message
        self.details = details or {}
        self.error_code = error_code
        super().__init__(self.message)


class ValidationError(PrakritiException):
    """–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    
    def __init__(
        self, 
        message: str = "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é",
        field: Optional[str] = None,
        value: Optional[Any] = None,
        **kwargs
    ):
        details = kwargs.get('details', {})
        if field:
            details['field'] = field
        if value is not None:
            details['value'] = str(value)
            
        super().__init__(
            message=message,
            details=details,
            error_code=kwargs.get('error_code', 'VALIDATION_ERROR')
        )


class IntegrationError(PrakritiException):
    """–û—à–∏–±–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏."""
    
    def __init__(
        self, 
        message: str = "–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–µ–π —Å–∏—Å—Ç–µ–º–æ–π",
        service: Optional[str] = None,
        **kwargs
    ):
        details = kwargs.get('details', {})
        if service:
            details['service'] = service
            
        super().__init__(
            message=message,
            details=details,
            error_code=kwargs.get('error_code', 'INTEGRATION_ERROR')
        )


class BusinessLogicError(PrakritiException):
    """–û—à–∏–±–∫–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏."""
    
    def __init__(
        self, 
        message: str = "–ù–∞—Ä—É—à–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª",
        rule: Optional[str] = None,
        **kwargs
    ):
        details = kwargs.get('details', {})
        if rule:
            details['rule'] = rule
            
        super().__init__(
            message=message,
            details=details,
            error_code=kwargs.get('error_code', 'BUSINESS_LOGIC_ERROR')
        )


# –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

class ClientNotFoundError(BusinessLogicError):
    """–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    
    def __init__(self, client_id: str):
        super().__init__(
            message=f"–ö–ª–∏–µ–Ω—Ç —Å ID {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
            error_code="CLIENT_NOT_FOUND",
            details={'client_id': client_id}
        )


class SubscriptionNotFoundError(BusinessLogicError):
    """–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    
    def __init__(self, subscription_id: str):
        super().__init__(
            message=f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å ID {subscription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
            error_code="SUBSCRIPTION_NOT_FOUND",
            details={'subscription_id': subscription_id}
        )


class InsufficientClassesError(BusinessLogicError):
    """–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–Ω—è—Ç–∏–π –≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ."""
    
    def __init__(self, remaining_classes: int):
        super().__init__(
            message=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–Ω—è—Ç–∏–π. –û—Å—Ç–∞–ª–æ—Å—å: {remaining_classes}",
            error_code="INSUFFICIENT_CLASSES",
            details={'remaining_classes': remaining_classes}
        )


class ExpiredSubscriptionError(BusinessLogicError):
    """–ê–±–æ–Ω–µ–º–µ–Ω—Ç –∏—Å—Ç—ë–∫."""
    
    def __init__(self, subscription_id: str, end_date: str):
        super().__init__(
            message=f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id} –∏—Å—Ç—ë–∫ {end_date}",
            error_code="EXPIRED_SUBSCRIPTION",
            details={'subscription_id': subscription_id, 'end_date': end_date}
        )


class GoogleSheetsError(IntegrationError):
    """–û—à–∏–±–∫–∏ —Ä–∞–±–æ—Ç—ã —Å Google Sheets."""
    
    def __init__(self, message: str, operation: Optional[str] = None):
        super().__init__(
            message=message,
            service="google_sheets",
            error_code="GOOGLE_SHEETS_ERROR",
            details={'operation': operation} if operation else {}
        )


class TelegramBotError(IntegrationError):
    """–û—à–∏–±–∫–∏ —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API."""
    
    def __init__(self, message: str, chat_id: Optional[int] = None):
        super().__init__(
            message=message,
            service="telegram_bot",
            error_code="TELEGRAM_BOT_ERROR",
            details={'chat_id': chat_id} if chat_id else {}
        ) 