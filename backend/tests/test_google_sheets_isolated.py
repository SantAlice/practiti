"""
üß™ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Google Sheets —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è

–¢–µ—Å—Ç—ã —Å –ø–æ–ª–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–µ–π –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""

import pytest
import os
from unittest.mock import AsyncMock, Mock, patch
from datetime import datetime

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
os.environ["TELEGRAM_BOT_TOKEN"] = "test_token"
os.environ["GOOGLE_SPREADSHEET_ID"] = "test_spreadsheet"
os.environ["SECRET_KEY"] = "test_secret"


class TestGoogleSheetsRepositoryIsolated:
    """–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Google Sheets —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞."""
        # –ú–æ–∫–∞–µ–º Google Sheets –∫–ª–∏–µ–Ω—Ç
        self.mock_sheets_client = Mock()
        self.mock_sheets_client.read_range = AsyncMock()
        self.mock_sheets_client.write_range = AsyncMock()
        self.mock_sheets_client.append_rows = AsyncMock()
        self.mock_sheets_client.clear_range = AsyncMock()
    
    @pytest.mark.asyncio
    async def test_mock_google_sheets_client(self):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –º–æ–∫–∞ Google Sheets –∫–ª–∏–µ–Ω—Ç–∞."""
        # Arrange
        self.mock_sheets_client.read_range.return_value = [["test", "data"]]
        
        # Act
        result = await self.mock_sheets_client.read_range("A1:B2")
        
        # Assert
        assert result == [["test", "data"]]
        self.mock_sheets_client.read_range.assert_called_once_with("A1:B2")
    
    @pytest.mark.asyncio
    async def test_client_data_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        client_data = {
            "name": "–ê–Ω–¥—Ä–µ–π",
            "phone": "+79991234567",
            "telegram_id": 123456,
            "yoga_experience": True,
            "intensity_preference": "—Å—Ä–µ–¥–Ω—è—è",
            "time_preference": "—É—Ç—Ä–æ"
        }
        
        assert client_data["name"] == "–ê–Ω–¥—Ä–µ–π"
        assert client_data["phone"] == "+79991234567"
        assert client_data["yoga_experience"] is True
    
    @pytest.mark.asyncio
    async def test_data_conversion_logic(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –º–æ–¥–µ–ª–µ–π
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        def bool_to_russian(value: bool) -> str:
            return "–î–∞" if value else "–ù–µ—Ç"
        
        def russian_to_bool(value: str) -> bool:
            return value.lower() in ["–¥–∞", "true", "1"]
        
        # –¢–µ—Å—Ç—ã
        assert bool_to_russian(True) == "–î–∞"
        assert bool_to_russian(False) == "–ù–µ—Ç"
        assert russian_to_bool("–î–∞") is True
        assert russian_to_bool("–ù–µ—Ç") is False
    
    @pytest.mark.asyncio
    async def test_row_data_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏."""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        
        def validate_row_data(row: list) -> bool:
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ."""
            if len(row) < 8:  # –ú–∏–Ω–∏–º—É–º 8 –ø–æ–ª–µ–π
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not row[0] or not row[1] or not row[2]:  # ID, Name, Phone
                return False
            
            return True
        
        # –¢–µ—Å—Ç—ã
        valid_row = ["id", "name", "phone", "123", "–î–∞", "—Å—Ä–µ–¥–Ω—è—è", "—É—Ç—Ä–æ", "2024-01-01"]
        invalid_row_short = ["id", "name"]
        invalid_row_empty_fields = ["", "name", "phone", "123", "–î–∞", "—Å—Ä–µ–¥–Ω—è—è", "—É—Ç—Ä–æ", "2024-01-01"]
        
        assert validate_row_data(valid_row) is True
        assert validate_row_data(invalid_row_short) is False
        assert validate_row_data(invalid_row_empty_fields) is False
    
    @pytest.mark.asyncio
    async def test_phone_number_formatting(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤."""
        def format_phone(phone: str) -> str:
            """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∏–¥."""
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
            cleaned = ''.join(c for c in phone if c.isdigit() or c == '+')
            
            # –î–æ–±–∞–≤–ª—è–µ–º + –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7
            if not cleaned.startswith('+') and cleaned.startswith('7'):
                cleaned = '+' + cleaned
            
            return cleaned
        
        # –¢–µ—Å—Ç—ã
        assert format_phone("79991234567") == "+79991234567"
        assert format_phone("+7 999 123-45-67") == "+79991234567"
        assert format_phone("8 (999) 123 45 67") == "89991234567"
        assert format_phone("+79991234567") == "+79991234567" 