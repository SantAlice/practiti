"""
üß™ –¢–µ—Å—Ç—ã –¥–ª—è Google Sheets —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è CyberKitty Practiti

Unit-—Ç–µ—Å—Ç—ã –¥–ª—è GoogleSheetsClientRepository —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–∫–æ–≤.
"""

import pytest
from unittest.mock import AsyncMock, Mock
from datetime import datetime

from backend.src.repositories.google_sheets_client_repository import GoogleSheetsClientRepository
from backend.src.models.client import ClientCreateData, ClientStatus
from backend.src.integrations.google_sheets import GoogleSheetsClient


class TestGoogleSheetsClientRepository:
    """–¢–µ—Å—Ç—ã –¥–ª—è Google Sheets —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞."""
        # –°–æ–∑–¥–∞—ë–º –º–æ–∫ Google Sheets –∫–ª–∏–µ–Ω—Ç–∞
        self.mock_sheets_client = Mock(spec=GoogleSheetsClient)
        self.repository = GoogleSheetsClientRepository(self.mock_sheets_client)
    
    @pytest.mark.asyncio
    async def test_save_client_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
        # Arrange
        client_data = ClientCreateData(
            name="–ê–Ω–¥—Ä–µ–π",
            phone="+79991234567",
            telegram_id=123456,
            yoga_experience=True,
            intensity_preference="—Å—Ä–µ–¥–Ω—è—è",
            time_preference="—É—Ç—Ä–æ"
        )
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã
        self.mock_sheets_client.read_range = AsyncMock(return_value=[])
        self.mock_sheets_client.write_range = AsyncMock(return_value=True)
        self.mock_sheets_client.append_rows = AsyncMock(return_value=True)
        
        # Act
        result = await self.repository.save_client(client_data)
        
        # Assert
        assert result.name == "–ê–Ω–¥—Ä–µ–π"
        assert result.phone == "+79991234567"
        assert result.status == ClientStatus.ACTIVE
        self.mock_sheets_client.append_rows.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_get_client_by_phone_found(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É - –Ω–∞–π–¥–µ–Ω."""
        # Arrange
        mock_data = [
            ["ID", "Name", "Phone", "Telegram_ID", "Yoga_Experience", 
             "Intensity_Preference", "Time_Preference", "Created_At", "Status"],
            ["client1", "–ê–Ω–¥—Ä–µ–π", "+79991234567", "123456", "–î–∞", 
             "—Å—Ä–µ–¥–Ω—è—è", "—É—Ç—Ä–æ", "2024-01-01T10:00:00", "active"]
        ]
        
        self.mock_sheets_client.read_range = AsyncMock(return_value=mock_data)
        
        # Act
        result = await self.repository.get_client_by_phone("+79991234567")
        
        # Assert
        assert result is not None
        assert result.name == "–ê–Ω–¥—Ä–µ–π"
        assert result.phone == "+79991234567"
        assert result.yoga_experience is True
    
    @pytest.mark.asyncio
    async def test_get_client_by_phone_not_found(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É - –Ω–µ –Ω–∞–π–¥–µ–Ω."""
        # Arrange
        mock_data = [
            ["ID", "Name", "Phone", "Telegram_ID", "Yoga_Experience", 
             "Intensity_Preference", "Time_Preference", "Created_At", "Status"]
        ]
        
        self.mock_sheets_client.read_range = AsyncMock(return_value=mock_data)
        
        # Act
        result = await self.repository.get_client_by_phone("+79999999999")
        
        # Assert
        assert result is None
    
    @pytest.mark.asyncio
    async def test_client_to_row_conversion(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É."""
        # Arrange
        from backend.src.models.client import Client
        
        client = Client(
            id="test-id",
            name="–¢–µ—Å—Ç",
            phone="+79991234567",
            telegram_id=123456,
            yoga_experience=False,
            intensity_preference="–Ω–∏–∑–∫–∞—è",
            time_preference="–≤–µ—á–µ—Ä",
            created_at=datetime(2024, 1, 1, 10, 0, 0),
            status=ClientStatus.ACTIVE
        )
        
        # Act
        row = self.repository._client_to_row(client)
        
        # Assert
        expected_row = [
            "test-id", "–¢–µ—Å—Ç", "+79991234567", "123456", "–ù–µ—Ç",
            "–Ω–∏–∑–∫–∞—è", "–≤–µ—á–µ—Ä", "2024-01-01T10:00:00", "active",
            "", "", "", ""
        ]
        assert row == expected_row
    
    @pytest.mark.asyncio
    async def test_row_to_client_conversion(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ –∫–ª–∏–µ–Ω—Ç–∞."""
        # Arrange
        row = [
            "test-id", "–¢–µ—Å—Ç", "+79991234567", "123456", "–î–∞",
            "–≤—ã—Å–æ–∫–∞—è", "—É—Ç—Ä–æ", "2024-01-01T10:00:00", "active",
            "25", "–ù–µ—Ç —Ç—Ä–∞–≤–º", "–ì–∏–±–∫–æ—Å—Ç—å", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç"
        ]
        
        # Act
        client = self.repository._row_to_client(row)
        
        # Assert
        assert client is not None
        assert client.id == "test-id"
        assert client.name == "–¢–µ—Å—Ç"
        assert client.yoga_experience is True
        assert client.age == 25
        assert client.injuries == "–ù–µ—Ç —Ç—Ä–∞–≤–º"
    
    @pytest.mark.asyncio
    async def test_row_to_client_invalid_data(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
        # Arrange
        row = ["id", "name"]  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        
        # Act
        client = self.repository._row_to_client(row)
        
        # Assert
        assert client is None
    
    @pytest.mark.asyncio
    async def test_count_clients(self):
        """–¢–µ—Å—Ç –ø–æ–¥—Å—á—ë—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
        # Arrange
        mock_data = [
            ["ID"],
            ["client1"],
            ["client2"],
            [""],  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è
            ["client3"]
        ]
        
        self.mock_sheets_client.read_range = AsyncMock(return_value=mock_data)
        
        # Act
        count = await self.repository.count_clients()
        
        # Assert
        assert count == 3 